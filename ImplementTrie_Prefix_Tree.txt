class Trie {
    
    final int size = 26; 
      
    // trie node 
    class TrieNode 
    { 
        TrieNode[] children = new TrieNode[size]; 
       
        boolean isEndOfWord; 
          
        TrieNode(){ 
            isEndOfWord = false; 
            for (int i = 0; i < size; i++) 
                children[i] = null; 
        } 
    }; 
       
    TrieNode root;  
    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode temp = root; 
        for (int i = 0; i < word.length(); i++) 
        { 
            int index = word.charAt(i) - 'a'; 
            if (temp.children[index] == null) 
                temp.children[index] = new TrieNode(); 
       
            temp = temp.children[index]; 
        } 
       
        
        temp.isEndOfWord = true; 
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode temp = root; 
        for (int i = 0; i < word.length(); i++) 
        { 
            int index = word.charAt(i) - 'a'; 
            if (temp.children[index] == null) 
                return false; 
            temp = temp.children[index]; 
        } 
        return (temp != null && temp.isEndOfWord);
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode temp = root; 
        for (int i = 0; i < prefix.length(); i++) 
        { 
            int index = prefix.charAt(i) - 'a'; 
            if (temp.children[index] == null) 
                return false; 
            temp = temp.children[index]; 
        } 
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */